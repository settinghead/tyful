// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Model.Vo.Template;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Net;
using Com.Settinghead.Wexpression.Client.Model.Vo;
using Vci.Silverlight.FileUploader;
namespace Com.Settinghead.Wexpression.Client.Model
{

    public class TemplateProxy : EntityProxy
    {
        new public const string NAME = "TemplateProxy";
        new public const string SRNAME = "TemplateSRProxy";
        private string _pathToLoad;

        public TemplateProxy():base(NAME, new List<TemplateVO>())
        {
            
        }

        public string templatePath
        {
            set
            {
                this._pathToLoad = value;
                Load();
            }
        }

        public void Load()
        {
            if (_pathToLoad != null)
            {
                template = new TemplateVO(_pathToLoad);
                WordLayer l = new WordLayer("layer1", template);
                //TODO: different path for template and layer PNG
                l.path = _pathToLoad;
                l.LoadLayerFromPNG(templateLoadComplete);
            }
        }

        private void templateLoadComplete(object sender, EventArgs e)
        {
            Facade.SendNotification(ApplicationFacade.TEMPLATE_LOADED, template);
            Facade.SendNotification(ApplicationFacade.EDIT_TEMPLATE, template);
        }

        public TemplateVO template
        {
            get
            {
                return this.getData() as TemplateVO;
            }
            set
            {
                this.setData(value);
            }
        }

        public Stream toFile(TemplateVO template = null)
        {
            MemoryStream stream = new MemoryStream();
            if (template == null) template = this.template;
            ZipOutputImpl zipOutput = new ZipOutputImpl(stream);
            zipOutput.process(template);
             zipOutput.zipUp();
            stream.Seek(0,SeekOrigin.Begin);
            return stream;
        }
        private const int CHUNK_SIZE = 4096;
        private long _bytesUploaded;
        private Stream zipFileStream;

        public void UploadTemplate()
        {
            zipFileStream = toFile();
            UserFile file = new UserFile();
            file.FileName = "template_" + file.Guid + ".zip";
            file.FileStream = zipFileStream;
            HttpFileUploader uploader = new HttpFileUploader(file, "/template/u", 1023 * 1024);
            uploader.UploadFinished += uploadComplete;
            uploader.StartUpload(null, null);
        }

        private void uploadComplete(object sender, EventArgs e)
        {
            SendNotification(ApplicationFacade.TEMPLATE_UPLOADED, urlLoader.data);
        }
    }
}
