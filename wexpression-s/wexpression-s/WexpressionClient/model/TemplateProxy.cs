// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Model.Vo.Template;
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
namespace Com.Settinghead.Wexpression.Client.Model
{

    public class TemplateProxy : EntityProxy, ILoadupProxy
    {
        public static const string NAME = "TemplateProxy";
        public static const string SRNAME = "TemplateSRProxy";
        private string _pathToLoad;
        private URLLoader urlLoader;

        public TemplateProxy()
        {
            super(NAME, new ArrayCollection());
        }

        public string templatePath
        {
            set
            {
                this._pathToLoad = value;
                load();
            }
        }

        public void Load()
        {
            if (_pathToLoad != null)
            {
                template = new TemplateVO(_pathToLoad);
                WordLayer l = new WordLayer("layer1", template);
                //TODO: different path for template and layer PNG
                l.path = _pathToLoad;
                l.LoadLayerFromPNG(templateLoadComplete);
            }
        }

        private void templateLoadComplete(Event evt0)
        {
            facade.SendNotification(ApplicationFacade.TEMPLATE_LOADED, template);
            facade.SendNotification(ApplicationFacade.EDIT_TEMPLATE, template);
        }

        public TemplateVO template
        {
            get
            {
                return this.getData() as TemplateVO;
            }
            set
            {
                this.setData(value);
            }
        }

        public ByteArray toFile(TemplateVO template = null)
        {
            if (template == null) template = this.template;
            ZipOutputImpl zipOutput = new ZipOutputImpl();
            zipOutput.process(template);
            ByteArray zipBytes = zipOutput.zipUp();
            return zipBytes;
        }

        public void UploadTemplate()
        {
            ByteArray b = toFile();
            // set up the request & headers for the image upload;
            URLRequest urlRequest = new URLRequest();
            urlRequest.url = "templates/u";
            URLRequestHeader header = new URLRequestHeader("Content-type", "application/octet-stream");
            urlRequest.method = URLRequestMethod.POST;
            urlRequest.data = b;
            urlRequest.requestHeaders.push(header);
            // create the image loader & send the image to the server;
            urlLoader = new URLLoader();
            //			urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
            urlLoader.addEventListener(Event.COMPLETE, uploadComplete);
            urlLoader.load(urlRequest);
        }

        public void uploadComplete(Event e)
        {
            SendNotification(ApplicationFacade.TEMPLATE_UPLOADED, urlLoader.data);
        }
    }
}
