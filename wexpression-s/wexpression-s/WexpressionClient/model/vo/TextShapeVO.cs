//
// (BSD License) 100% Open Source see http://en.wikipedia.org/wiki/BSD_licenses
//
// Copyright (c) 2009, Martin Heidegger
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of the Martin Heidegger nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using com.settinghead.wexpression.client;
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
namespace Com.Settinghead.Wexpression.Client.Model.Vo
{
    public class TextShapeVO : IImageShape
    {
        //[internal Embed(source="Vera.ttf", fontFamily="vera", mimeType="application/x-font",
        //embedAsCFF="false", advancedAntiAliasing="true")]
        //public const Class Vera;

        //[Embed(source="pokoljaro-kRB.ttf", fontFamily="pokoljaro", mimeType='application/x-font',
        //embedAsCFF='false', advancedAntiAliasing="true")]
        //public static const Pokoljaro: Class;



        private const Matrix HELPER_MATRIX = new Matrix(1, 0, 0, 1);


        private const Matrix HELPER_MATRIX = new Matrix();
        private Bitmap _bmp;
        private TextField _textField;
        private double _size;
        private double _centerX, _centerY, _rotation = 0;

        public TextShapeVO(bool embeddedFont, String text, double safetyBorder, double size, double rotation = 0, String fontName = "pokoljaro")
        {
            this._size = size;

            _textField = createTextField(fontName, text, size);
            _textField.rotation = rotation;

            Rectangle bounds = _textField.getBounds(_textField);
            HELPER_MATRIX.tx = -bounds.x + safetyBorder;
            HELPER_MATRIX.ty = -bounds.y + safetyBorder;

            _bmp = new Bitmap(new BitmapData(bounds.width + safetyBorder * 2, bounds.height + safetyBorder * 2, true, 0));
            Sprite s = new Sprite();
            s.width = _textField.width;
            s.height = textField.height;

            //			if(size < 20){
            //				
            //				s.graphics.beginFill(0xbcbcbc,0.5);
            //				s.graphics.drawRect(0,0,s.width,s.height);
            //				s.graphics.endFill();
            //			}

            s.addChild(_textField);
            _bmp.bitmapData.draw(s);

            _bmp.x = 0;
            _bmp.y = 0;

        }

        private TextField CreateTextField(String fontName, String text, double size)
			{
	
				
				TextField textField = new TextField();
	//			textField.setTextFormat( new TextFormat( font.fontName, size ) );
				StyleSheet style = new StyleSheet();
				style.parseCSS("div{font-size: "+_size+"; font-family: "+fontName+"; leading: 0; text-align: center; padding: 0; margin: 0; }");
				textField.styleSheet = style;
				textField.autoSize = TextFieldAutoSize.LEFT;
				textField.background = false;
				textField.selectable = false;
				textField.embedFonts = true;
				textField.cacheAsBitmap = false;
				textField.x = 0;
				textField.y = 0;
				textField.antiAliasType = AntiAliasType.ADVANCED;
	//			textField.text  = text;
				textField.htmlText = "<div>"+text+"</div>";
    //            textField.filters = [				new DropShadowFilter(0.5,45,0,1.0,0.5,0.5) 
    //];
				if(text.length>11){ //TODO: this is a temporary fix
					double w = textField.width;
					textField.wordWrap = true;
					textField.width = w/(text.length/11)*1.1 ;
				}
				return textField;
			}

        public virtual bool Contains(double x, double y, double width, double height, double rotation, bool transformed)
        {
            if (rotation != 0) throw new NotImplementedError();
            if (!Intersects(x, y, width, height, transformed))
            {
                double rX = x + width * (new Random()).Next();
                double rY = y + height * (new Random()).Next();
                if (transformed)
                    return _textField.HitTestPo((int)rY, rY, true);
                else
                    return _bmp.HitTestPo((int)rX, rY, true);
            }
            else return false;
        }

        public virtual bool ContainsPoint(double x, double y, bool transformed)
        {
            //			if(transformed)
            //				return _textField.hitTestPo((int)x,y,true);
            //			else{
            //				return _bmp.hitTestPo((int)x,y,true);
            //			}
            return _bmp.bitmapData.getPixel32(x, y) > 0x00000000;
        }

        private Point origin = new Po((int)0, 0);
        private Rectangle testRect = new Rectangle(0, 0, 1, 1);
        public virtual bool Intersects(double x, double y, double width, double height, bool transformed)
        {
            //
            //			if(width<1) width = 1;
            //			if(height<1) height = 1;
            if (transformed)
                throw new NotImplementedError();
            else
            {
                //				for(double xx = x; xx<x+width;xx++)
                //					for(double yy = y; yy<y+height;yy++){
                //						if(_bmp.bitmapData.getPixel(xx,yy)!=0xffffff)
                //							return true;
                //					}
                //				return false;
                testRect.x = x;
                testRect.y = y;
                testRect.width = width;
                testRect.height = height;
                bool r = _bmp.bitmapData.HitTest(origin, 1, testRect, null, 1);
                return r;
            }
        }

        public void SetCenterLocation(double centerX, double centerY)
        {
            this._centerX = centerX;
            this._centerY = centerY;
        }





        private Matrix matrix = new Matrix();

        public int width
        {
            get
            {
                return _textField.width;
            }
        }
        public double height
        {
            get
            {
                return _textField.height;
            }
        }
        public double rotation
        {
            get
            {
                return _rotation;
            }
        }
        public double centerX
        {
            get
            {
                return _centerX;
            }
        }
        public double centerY
        {
            get
            {
                return _centerY;
            }
        }

        public TextField textField
        {
            get
            {
                return _textField;
            }
        }

        public Rectangle objectBounds
        {
            get
            {
                return _textField.getBounds(_textField.parent);
            }
        }

        public void Rotate(double rotation)
        {

            this._rotation = rotation;
        }
    }
}
