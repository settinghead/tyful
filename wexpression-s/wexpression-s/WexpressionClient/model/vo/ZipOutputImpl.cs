// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using ICSharpCode.SharpZipLib.Zip;

namespace Com.Settinghead.Wexpression.Client.Model.Vo
{

    public class ZipOutputImpl : IZipOutput
    {

        private ZipOutputStream zipOut = new ZipOutputStream();
        private String prefix = "";

        public ZipOutputImpl()
        {
        }

        public virtual void PutStringToFile(String fileName, String data)
        {
            if (data == null) return;
            ByteArray b = new ByteArray();
            b.WriteMultiByte(data, "utf-8");
            PutBytesToFile(fileName, b);
        }

        public void putBytesToFile(String fileName, byte[] bytes)
        {
            if (bytes == null) return;
            ZipEntry ze = new ZipEntry(prefix + fileName);
            zipOut.PutNextEntry(ze);
            zipOut.Write(bytes);
            zipOut.CloseEntry();
        }

        public void putBitmapDataToPNGFile(String fileName, BitmapData bmpData)
        {
            if (bmpData == null) return;
            PutBytesToFile(fileName, PNGEncoder.Encode(bmpData));
        }

        public virtual void Process(Object obj0, String dirName = "")
        {
            if (obj0 == null) return;
            String prev_prefix = prefix;
            prefix += dirName + "/";
            if (obj0 is Vector || obj0 is Array || obj0 is ArrayCollection)
            {
                for (int i = 0; i < obj0.length; i++)
                {
                    process(obj0[i], i.toString());
                }
            }
            else
            {
                if (obj0 is IZippable)
                {
                    Object properties = new Object();
                    ((IZippable)obj0).saveProperties(properties);
                    putStringToFile("properties.json", (new JSONEncoder(properties)).getString());

                    ((IZippable)obj0).writeNonJSONPropertiesToZip(this);
                }
                else
                {
                    putStringToFile("properties.json", (new JSONEncoder(obj0)).getString());
                }
            }
            prefix = prev_prefix;
        }

        public ByteArray zipUp()
        {
            zipOut.Finish();
            return zipOut.byteArray;
        }
    }

}
