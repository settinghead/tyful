// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using ICSharpCode.SharpZipLib.Zip;
using System.Windows.Media.Imaging;
using ImageTools;
using ImageTools.IO;
using ImageTools.IO.Png;
using System.Windows.Media;

namespace Com.Settinghead.Wexpression.Client.Model.Vo
{

    public class ZipOutputImpl : IZipOutput
    {

        private readonly ZipOutputStream zipOut;
        private String prefix = "";

        public ZipOutputImpl(Stream outputStream)
        {
            zipOut = new ZipOutputStream(outputStream);
        }

        public virtual void PutStringToFile(String fileName, String data)
        {
            if (data == null) return;
            MemoryStream ms = new MemoryStream();
            using (BinaryWriter writer = new BinaryWriter(stream))
            {
                writer.Write(data);
            }
            PutBytesToFile(fileName, ms);
        }

        public void PutBytesToFile(String fileName, Stream stream)
        {
            if (bytes == null) return;
            ZipEntry ze = new ZipEntry(prefix + fileName);
            zipOut.PutNextEntry(ze);
            stream.Seek(0, SeekOrigin.Begin);

            byte[] buffer = new byte[2048];
            int n;
            while ((n = stream.Read(buffer, 0, buffer.Length)) > 0)
            {
                zipOut.Write(buffer, 0, n);
            }
            zipOut.CloseEntry();
        }

        public void PutWriteableBitmapToPNGFile(String fileName, WriteableBitmap bmpData)
        {
            if (bmpData == null) return;
            PngEncoder encoder = new PngEncoder();
            Stream stream = new MemoryStream();
            encoder.Encode(bmpData.ToImage(), stream);
            PutBytesToFile(fileName, stream);
        }

        public virtual void Process(Object obj0, String dirName = "")
        {
            if (obj0 == null) return;
            String prev_prefix = prefix;
            prefix += dirName + "/";
            if (obj0 is IList || obj0.GetType().IsArray)
            {
                int count = 0;
                foreach (var o in obj0)
                    process(o, (count++).ToString());
            }
            else
            {
                if (obj0 is IZippable)
                {
                    Object properties = new Object();
                    ((IZippable)obj0).saveProperties(properties);
                    putStringToFile("properties.json", (new JSONEncoder(properties)).getString());

                    ((IZippable)obj0).writeNonJSONPropertiesToZip(this);
                }
                else
                {
                    putStringToFile("properties.json", (new JSONEncoder(obj0)).getString());
                }
            }
            prefix = prev_prefix;
        }

        public void zipUp()
        {
            zipOut.Flush();

            zipOut.Finish();
        }
    }

}
