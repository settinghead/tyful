// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------

using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Density;
using Com.Settinghead.Wexpression.Client.Model.Vo;
using Com.Settinghead.Wexpression.Client.Model.Vo.Template;
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Net;
using Vci.Silverlight.FileUploader;

namespace Com.Settinghead.Wexpression.Client.Model
{

    public class TuProxy : EntityProxy
    {
        public const string NAME = "TuProxy";
        public const string SRNAME = "TuSRProxy";

        private TemplateVO _template;
        private WordListVO _wordList;

        public TuProxy()
            : base(NAME, new ArrayCollection())
        {
            

        }

        // return data property cast to proper type
        public TuVO tu
        {
            get
            {
                return (TuVO)data;
            }
            set
            {
                this.setData(value);

            }
        }

        public void Load()
        {
            TuVO tu = new TuVO(_template, _wordList);
            this.SetData(tu);

        }

        public TemplateVO template
        {
            set
            {
                this._template = value;
            }
        }

        public WordListVO WordList
        {
            set
            {
                this._wordList = value;
            }
        }

        //private IResponder _previewGenerationResponder;

        //public IResponder previewGenerationResponder
        //{
        //    get
        //    {
        //        return _previewGenerationResponder;

        //    }
        //    set
        //    {
        //        this._previewGenerationResponder = value;
        //    }
        //}

        private int failureCount = 0;
        public void RenderNextDisplayWord(TuVO tu)
        {
            //TODO
            EngineWordVO eWord = null;
            WordVO word = null;

            word = tu.GetNextWordAndIncrement();

            if (word == null) return;
            eWord = GenerateEngineWord(word);

            if (eWord != null)
            {
                PlaceWord(eWord);

                //				if (eWord.wasSkipped()){
                while (eWord.WasSkipped())
                {
                    if (tu.indexOffset + tu.currentWordIndex == tu.words.size - 1)
                        break;
                    tu.indexOffset += tu.words.size / 40;
                    if (tu.indexOffset + tu.currentWordIndex > tu.words.size)
                    {
                        tu.indexOffset = tu.words.size - 1;
                        break;
                    }
                    eWord = GenerateEngineWord(word);
                    PlaceWord(eWord);
                }

                tu.PushEngineWord(eWord);
                DisplayWordVO dw = null;
                if (!eWord.WasSkipped())
                {
                    failureCount = 0;
                    dw = eWord.Rendition(tu.template.colorer.ColorFor(eWord));
                    tu.dWords.AddItem(dw);
                }
                else
                {
                    failureCount++;

                    //5 consecutive failures. Put rendering to an end.
                    if (failureCount > tu.template.dilligence)
                    {
                        //						tu.skipToLast();
                        SendNotification(ApplicationFacade.TU_GENERATION_LAST_CALL);
                    }

                }

                if (tu.finishedDisplayWordRendering && this.previewGenerationResponder != null)
                {
                    tu.template.previewPNG = PNGEncoder.Encode(tu.generatedImage);
                    this.previewGenerationResponder.Result(tu.template);
                }
                SendNotification(ApplicationFacade.DISPLAYWORD_CREATED, dw);
            }
        }

        public EngineWordVO GenerateEngineWord(WordVO word)
        {
            int newIndex = (tu.currentWordIndex + tu.indexOffset < tu.words.size) ?
                tu.currentWordIndex + tu.indexOffset : tu.words.size;
            EngineWordVO eWord = new EngineWordVO(word, newIndex, tu.words.size);

            String wordFont = tu.template.fonter.FontFor(word);
            double wordSize = tu.template.sizer.SizeFor(word, newIndex, tu.words.size);
            //			double wordAngle= template.angler.angleFor(eWord);

            TextShapeVO shape = WordShaper.MakeShape(word.word, wordSize, wordFont, 0);
            if (shape == null)
            {
                SkipWord(eWord, EngineWordVO.SKIP_REASON_SHAPE_TOO_SMALL);
            }
            else
            {
                eWord.SetShape(shape, tu.template.renderOptions.wordPadding);
            }

            return eWord;
        }

        public bool PlaceWord(EngineWordVO eWord)
        {
            //			totalCount++;
            //			tu.failedLastVar = false;
            WordVO word = eWord.word;

            // these into
            // EngineWord.setDesiredLocation?
            // Does that make
            // sense?
            int wordImageWidth = ((int)eWord.shape.textField.width);
            int wordImageHeight = ((int)eWord.shape.textField.height);

            eWord.RetrieveDesiredLocations(tu.template.placer, tu.eWords.length,
                wordImageWidth, wordImageHeight, tu.template.width,
                tu.template.height);
            // Set maximum number of placement trials


            while (eWord.HasNextDesiredLocation())
            {
                PlaceInfo candidateLoc = eWord.NextDesiredLocation();

                int maxAttemptsToPlace = (tu.template.renderOptions.maxAttemptsToPlaceWord > 0) ? tu.template.renderOptions.maxAttemptsToPlaceWord
                    : CalculateMaxAttemptsFromWordWeight(eWord, candidateLoc.patch);

                EngineWordVO lastCollidedWith = null;
                int attempt;
                //				Set neighboringPatches = candidateLoc.patch.neighborsAndMe;
                //				Vector neighboringEWords.<EngineWordVO> = new Vector.<EngineWordVO>();

                //				org iter.as3commons.collections.framework.IIterator = neighboringPatches.iterator();

                //				
                //				while(iter.hasNext()){
                //					Patch p = iter.next();
                //					for each (EngineWordVO ew in p.eWords)
                //						neighboringEWords.push(ew);
                //					Vector ao.<Patch> = p.ancestorsAndOffsprngs();
                //					for each (Patch p1 in ao){
                //						for each (EngineWordVO ew in p1.eWords)
                //							neighboringEWords.push(ew);
                //					}
                //				}


                attempt = 0;
            inner:
                {
                    for (; attempt < maxAttemptsToPlace; attempt++)
                    {
                        eWord.NudgeTo(candidateLoc.GetpVector().Add(tu.template.nudger.NudgeFor(word, candidateLoc,
                            attempt, maxAttemptsToPlace)), candidateLoc.patch);

                        double angle = candidateLoc.patch.layer.angler.AngleFor(eWord);
                        //			eWord.getTree().draw(destination.graphics);

                        // // TODO
                        eWord.GetTree().SetRotation(angle);
                        //
                        if (eWord.Trespassed(candidateLoc.patch.layer, angle))
                            continue;
                        PlaceInfo loc = eWord.GetCurrentLocation();
                        if (loc.GetpVector().x < 0 || loc.GetpVector().y < 0 || loc.GetpVector().x + wordImageWidth >= tu.template.width
                            || loc.GetpVector().y + wordImageHeight >= tu.template.height)
                        {
                            continue;
                        }

                        if (lastCollidedWith != null && eWord.Overlaps(lastCollidedWith))
                        {
                            continue;
                        }

                        bool foundOverlap = false;

                        //					for (int i= 0; !foundOverlap && i < neighboringEWords.length; i++) {
                        for (int i = 0; !foundOverlap && i < tu.currentWordIndex; i++)
                        {
                            //						EngineWordVO otherWord= neighboringEWords[i];
                            EngineWordVO otherWord = tu.eWords[i];
                            if (otherWord.WasSkipped()) continue; //can't overlap with skipped word

                            if (eWord.Overlaps(otherWord))
                            {
                                foundOverlap = true;

                                lastCollidedWith = otherWord;
                                attempt++;
                                goto inner;
                            }
                        }

                        if (!foundOverlap)
                        {
                            candidateLoc.patch.Mark(wordImageWidth * wordImageHeight, false);
                            tu.template.placer.Success(eWord.desiredLocations);
                            eWord.FinalizeLocation();
                            //						successCount++;
                            candidateLoc.patch.lastAttempt = attempt;
                            return true;
                        }
                    }
                }
            gotoinner:
                ;
                candidateLoc.patch.lastAttempt = attempt;
                candidateLoc.patch.Fail();
            }

            SkipWord(eWord, EngineWordVO.SKIP_REASON_NO_SPACE);
            //			info.patch.mark(wordImageWidth*wordImageHeight, true);
            tu.template.placer.Fail(eWord.desiredLocations);
            //			tu.failedLastVar = true;
            return false;
        }

        private int CalculateMaxAttemptsFromWordWeight(EngineWordVO eWord, Patch p)
        {
            return (p.GetWidth() * p.GetHeight()) / (eWord.shape.width * eWord.shape.height) * 5
                * (1 + (new Random()).Next() * 0.4d)
                ;
            //			double area = p.getWidth() * p.getHeight();
            //			int result = area / 10000 * ((int)((1.0 - word.weight) * 60) )+ 30 + 40*Math.random();
            //			Assert.isTrue(result>0);
            //			return result;
        }

        private void SkipWord(EngineWordVO eWord, int reason)
        {
            eWord.WasSkippedBecause(reason);
        }


        public void PostToFacebook()
        {
            //TODO: png encoding
            byte[] b = PNGEncoder.encode(tu.generatedImage);
            // set up the request & headers for the image upload;
           
            // create the image loader & send the image to the server;
            UserFile file = new UserFile();
            file.FileStream = stream;
            file.FileName = "a.png";
            HttpFileUploader uploader = new HttpFileUploader(file, "/facebook/publish_photo", 1024 * 1024);
            uploader.UploadFinished +=photoPostComplete;
            uploader.StartUpload(null, null);
            
        }

        public void photoPostComplete(object sender, OpenReadCompletedEventArgs e)
        {
        }
    }
}
