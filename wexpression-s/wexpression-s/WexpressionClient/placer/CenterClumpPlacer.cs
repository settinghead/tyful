// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Model.Vo;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using Com.Settinghead.Wexpression.Client.Utils;

namespace Com.Settinghead.Wexpression.Client.Placer
{

    public class CenterClumpPlacer : WordPlacer
    {
        public CenterClumpPlacer()
        {
            this.haveNextNextGaussian = false;
        }

        public virtual IList<PlaceInfo> Place(WordVO word, int wordIndex, int wordsCount, int wordImageWidth, int wordImageHeight, int fieldWidth, int fieldHeight)
        {

            PlaceInfo p = new PlaceInfo(new Po((int)getOneUnder(fieldWidth - wordImageWidth),
                getOneUnder(fieldHeight - wordImageHeight)));
            IList<PlaceInfo> v = new List<PlaceInfo>();
            v.push(p);
            return v;
        }

        private int GetOneUnder(double upperLimit)
        {
            double stdev = 0.4d;

            return Math.Round(MathUtils.Map((NextGaussian()
                        ) * stdev, -2, 2, 0, upperLimit), MidpointRounding.AwayFromZero);
        }

        private bool haveNextNextGaussian;
        private double nextNextGaussian;
        private Random rnd = new Random();
        private double NextGaussian()
        {
            if (haveNextNextGaussian)
            {
                haveNextNextGaussian = false;
                return nextNextGaussian;
            }
            else
            {
                double v1, v2, s;
                do
                {
                    v1 = 2 * rnd.NextDouble() - 1;   // between -1.0 and 1.0
                    v2 = 2 * rnd.NextDouble() - 1;   // between -1.0 and 1.0
                    s = v1 * v1 + v2 * v2;
                } while (s >= 1 || s == 0);
                double multiplier = Math.sqrt(-2 * Math.log(s) / s);
                nextNextGaussian = v2 * multiplier;
                haveNextNextGaussian = true;
                return v1 * multiplier;
            }
        }

        public virtual void Fail(Object returnedObj)
        {
        }
        public virtual void Success(Object returnedObj)
        {
        }
    }

}
