// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:00 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client.Model.Vo.Template;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using Wintellect.PowerCollections;
namespace Com.Settinghead.Wexpression.Client.Density
{

    public class PatchQueue : OrderedBag<Patch>
    {
        //		private Treap _queue = new Treap(new PatchComparator());

        private int myLevel;
        private LeveledPatchMap _map;
        private Dictionary<string, Patch> _lookupMap;

        public PatchQueue(int myLevel_0, LeveledPatchMap map)
        {
            this._lookupMap = new Dictionary<string, Patch>();
            this.myLevel = myLevel_0;
            this._map = map;
            if (myLevel_0 == 0)
            {
                foreach (Layer layer in _map.getIndex().template.layers)
                    if (layer is WordLayer)
                        tryAdd(new Patch(0, 0, layer.width, layer.height, 0, null, this, (WordLayer)layer));
            }
        }

        public Patch GetBestPatch()
        {
            Patch result = Poll();
            return result;
        }

        private Patch Poll()
        {
            return base.removeFirst();
        }


        /// <returns>the myLevel</returns>
        public int GetMyLevel()
        {
            return myLevel;
        }


        public void TryAddAll(IList<Patch> patches)
        {
            foreach (Patch p in patches)
                tryAdd(p);
        }

        public void TryAdd(Patch p)
        {
            if (p.GetAlphaSum() > DensityPatchIndex.QUEUE_ALPHA_THRESHOLD)
            {
                base.add(p);
                //				_lookupMap[p.getX().toString()+", " +p.getY().toString()] = p;
                //				trace(p.getX().toString()+", " +p.getY().toString());
            }
            else
                Trace("failed to add back to queue, alpha sum: " + p.GetAlphaSum().ToString());
        }

        public Patch PatchAtCoordinate(double x, double y)
        {
            Patch p = _lookupMap[x.ToString() + ", " + y.ToString()];
            Trace("lookup patch: " + x.ToString() + ", " + y.ToString());
            return p;
        }

        public PatchQueue Descend(int queueLevel)
        {
            PatchQueue queue = new PatchQueue(queueLevel, this._map);
            IIterator it = base.iterator();
            while (it.hasNext())
            {
                Patch patch = it.next();
                IList<Patch> children = patch.divideIntoNineOrMore(queue);
                //				 Assert.isTrue(children.length == DensityPatchIndex.NUMBER_OF_DIVISIONS);
                queue.TryAddAll(children);
            }
            return queue;
        }

        public LeveledPatchMap GetMap()
        {
            return this._map;
        }
    }
}
