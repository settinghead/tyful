// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client.Model.Vo;
using Com.Settinghead.Wexpression.Client.Model.Vo.Template;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
namespace Com.Settinghead.Wexpression.Client.Density
{

    public class Patch : IComparable<Patch>
    {


        private int x;
        private int y;
        private int width;
        private int height;
        private double _averageAlpha = double.NaN;
        private Patch parent;
        private IList<Patch> children = null;
        private HashSet<Patch> _childrenMarker;
        private double _area = double.NaN;
        private double _alphaSum = double.NaN;
        private PatchQueue _queue;
        private int rank;
        private int _numOfFailures;
        private int _lastAttempt;
        private IList<EngineWordVO> _eWords = null;
        private WordLayer _layer;

        public Patch(int x_0, int y_1, int width_2, int height_3, int rank_4, Patch parent_5, PatchQueue queue, WordLayer layer)
        {
            this._lastAttempt = 0;
            this._neighborsAndMe = null;
            this.SetX(x_0);
            this.SetY(y_1);
            this.SetWidth(width_2);
            this.SetHeight(height_3);
            this.SetParent(parent_5);
            this.rank = rank_4;
            this._queue = queue;
            this._layer = layer;

        }

        public WordLayer layer
        {
            get
            {
                return this._layer;
            }
        }

        public void SetX(int x_0)
        {
            this.x = x_0;
        }

        public int GetX()
        {
            return this.x;
        }

        public void SetY(int y_0)
        {
            this.y = y_0;
        }

        public int GetY()
        {
            return this.y;
        }

        public TemplateVO GetImg()
        {
            return this._queue.GetMap().GetIndex().template;
        }

        private void SetWidth(int width_0)
        {
            this.width = width_0;
        }

        public int GetWidth()
        {
            return width;
        }

        public double GetAverageAlpha()
        {

            if (Double.IsNaN(this._averageAlpha))
            {
                // now remove sub-patches that's already marked
                this._averageAlpha = this.AlphaSum;
                //				for each (Patch markedChild in this.getMarkedChildren()) {
                //					this._averageAlpha -= markedChild.getAverageAlpha()
                //						* DensityPatchIndex.MARK_FILL_FACTOR;
                //				}
                //				
                this._averageAlpha /= this.Area;

            }
            return this._averageAlpha;
        }

        public double AlphaSum
        {
            get
            {
                if (Double.IsNaN(this._alphaSum))
                // lazy calc
                {
                    //				this._alphaSum = 0;
                    //				this.getArea();
                    //
                    //				if (this.getChildren() == null
                    //					|| this.getChildren().length == 0) {
                    //					for (int i= 0; i < this.getWidth(); i++)
                    //						for (int j= 0; j < this.getHeight(); j++) {
                    //							double brightness = _layer.getBrightness(
                    //								this.getX() + i, this.getY() + j);
                    //							if(Double.IsNaN(brightness)){
                    //								brightness = 0;
                    //							}
                    //							else 
                    //								brightness = brightness;
                    //							this._alphaSum += brightness;
                    //							if(brightness==0)
                    //								this._area -= 1;
                    //						}
                    //				} else
                    //					for each (Patch p in this.getChildren())
                    //						this._alphaSum += p.getAlphaSum();
                    this._alphaSum = 1;
                }

                if (this._alphaSum == 0)
                    this._alphaSum = double.NEGATIVE_INFINITY;

                return this._alphaSum;
            }
        }

        //		private Set getMarkedChildren() {
        //			if (this._childrenMarker == null)
        //				this._childrenMarker = new Set();
        //			return this._childrenMarker;
        //		}


        public int GetRank()
        {
            return this.rank;
        }

        private void SetHeight(int height_0)
        {
            this.height = height_0;
        }

        public int GetHeight()
        {
            return this.height;
        }

        private void SetParent(Patch parent_0)
        {
            this.parent = parent_0;
        }

        public Patch GetParent()
        {
            return this.parent;
        }

        private void SetChildren(IList<Patch> children)
        {
            this.children = children;
        }

        public IList<Patch> GetChildren()
        {
            return this.children;
        }

        public IList<Patch> DivideIntoNineOrMore(PatchQueue newQueue)
        {
            ArrayList<Patch> result = new List<Patch>();
            int min = getWidth() < getHeight() ? getWidth()
                : getHeight();
            int squareLength = min / DensityPatchIndex.NUMBER_OF_DIVISIONS;
            int centerCount = (DensityPatchIndex.NUMBER_OF_DIVISIONS + 1) / 2;
            bool breakI = false;
            for (int i = 0; i < getWidth(); i += squareLength)
            {
                int squareWidth;
                if (i + squareLength * 2 > getWidth())
                {
                    squareWidth = getWidth() - i;
                    // i = getWidth();
                    breakI = true;
                }
                else
                    squareWidth = squareLength;
                bool breakJ = false;

                for (int j = 0; j < getHeight(); j += squareLength)
                {
                    int squareHeight;
                    if (j + squareLength * 2 > getHeight())
                    {
                        squareHeight = getHeight() - j;
                        // j = getHeight();
                        breakJ = true;
                    }
                    else
                        squareHeight = squareLength;

                    // the closer to the center, the higher the rank
                    Patch p = new Patch(getX() + i, getY() + j,
                        squareWidth, squareHeight, 0, this, newQueue, this._layer);
                    result.push(p);
                    if (breakJ)
                        break;
                }
                if (breakI)
                    break;
            }

            setChildren(result);
            //			trace("Patches", this.getLevel() + 1, result.length);  
            return result;
        }



        public void Mark(int smearedArea, bool spreadSmearToChildren)
        {
            //			this.resetWorthCalculations();
            //			this.getAlphaSum();
            this._alphaSum -= smearedArea * DensityPatchIndex.MARK_FILL_FACTOR;
            if (spreadSmearToChildren)
                foreach (Patch child in this.getChildren())
                {
                    child.mark(smearedArea * DensityPatchIndex.MARK_FILL_FACTOR / this.getChildren().length, true);
                    //				child._alphaSum -= smearedArea * DensityPatchIndex.MARK_FILL_FACTOR/this.getChildren().length;
                    //				child._queue.remove(child);
                    //				child._queue.tryAdd(child);
                }
            //			if (getParent() != null)
            //				getParent().markChild(this);
            if (getParent() != null)
            {
                parent.mark(smearedArea, false);
                //				parent._queue.remove(parent);
                //				parent._queue.tryAdd(parent);
            }
        }


        //		public void unmarkForParent() {
        //			if (getParent() != null)
        //				getParent().unmarkChild(this);
        //		}
        //		
        //		private void markChild(Patch patch) {
        //			this.getMarkedChildren().add(patch);
        //			this.resetWorthCalculations();
        //			// re-sort
        //			this.reRank();
        //			// // cascading mark parents
        //			// if (this.getParent() != null)
        //			// this.getParent().markChild(this);
        //		}
        //		
        //		private void unmarkChild(Patch patch) {
        //			if (this.getMarkedChildren().remove(patch)) {
        //				this.resetWorthCalculations();
        //				// re-sort
        //				this.reRank();
        //				// cascading mark parents
        //				// if (this.getParent() != null)
        //				// this.getParent().markChild(this);
        //				// this.unmarkForParent();
        //			}
        //		}

        //		private void resetWorthCalculations() {
        //			this._area = NaN;
        //			this._averageAlpha = NaN;
        //		}


        /// <returns>the area</returns>
        public double Area
        {
            get
            {
                if (Double.IsNaN(this._area))
                    this._area = GetWidth() * GetHeight();
                return this._area;
            }
        }



        public int GetLevel()
        {
            return _queue.GetMyLevel();
        }

        public void Fail()
        {
            _numOfFailures++;
        }

        public int numberOfFailures
        {
            get
            {
                return _numOfFailures;
            }
        }

        public int lastAttempt
        {
            get
            {
                return _lastAttempt;
            }
            set
            {
                _lastAttempt = value;

            }
        }

        public IList<EngineWordVO> eWords
        {
            get
            {
                if (this._eWords == null)
                    this._eWords = new List<EngineWordVO>();
                return this._eWords;
            }
        }

        private HashSet<Patch> _neighborsAndMe;
        public HashSet<Patch> neighborsAndMe
        {
            get
            {
                if (this._neighborsAndMe == null)
                {
                    this._neighborsAndMe = new Set();
                    double min = this.width < this.height ? this.width : this.height;
                    double leftX = this.x - min, rightX = this.x + min,
                        topY = this.y - min, bottomY = this.y + min;
                    Patch p;
                    p = this._queue.patchAtCoordinate(leftX, topY);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(leftX, this.y);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(leftX, bottomY);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(this.x, topY);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(this.x, this.y);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(this.x, bottomY);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(rightX, topY);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(rightX, this.y);
                    if (p != null) _neighborsAndMe.add(p);
                    p = this._queue.patchAtCoordinate(rightX, bottomY);
                    if (p != null) _neighborsAndMe.add(p);
                }
                return this._neighborsAndMe;
            }
        }

        public IList<Patch> AncestorsAndOffsprngs
        {
            get
            {
                List<Patch> result = new List<Patch>();
                ancestors(result);
                offsprings(result);
                return result;
            }
        }

        private void Ancestors(IList<Patch> collector)
        {
            if (this.parent != null)
            {
                collector.push(parent);
                parent.ancestors(collector);
            }

        }

        private void Offsprings(IList<Patch> collector)
        {
            foreach (Patch p in this.children)
            {
                collector.push(p);
                p.offsprings(collector);
            }
        }

        public int CompareTo(Patch p)
        {

            //			int r= -_numComparator.compare(p1.getAverageAlpha(),p2.getAverageAlpha());
            int r = this.numberOfFailures.CompareTo(p2.numberOfFailures);

            if (r == 0)
            {
                r = this.AlphaSum.CompareTo(p.AlphaSum);
                if (r == 0)
                    return this.Rank - p.Rank;
                else
                    return r;
            }
            else return r;

        }
    }
}
