// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Model.Vo;
using Java.Awt;
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
namespace Com.Settinghead.Wexpression.Client.Nudger
{


    /*
     Copyright 2010 Daniel Bernier
	
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
	
     http://www.apache.org/licenses/LICENSE-2.0
	
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
     */


    public class SpiralWordNudger : WordNudger
    {

        public SpiralWordNudger()
        {
            this.thetaIncrement = System.Math.PI * 0.03d;
        }

        // Who knows? this seems to be good, but it seems to depend on the font --
        // bigger fonts need a bigger thetaIncrement.
        private double thetaIncrement;

        public virtual Point NudgeFor(WordVO w, PlaceInfo pInfo, int attempt, int totalPlannedAttempt)
        {
            attempt = (attempt + pInfo.patch.lastAttempt) % totalPlannedAttempt;
            double rad = PowerMap(0.6d, attempt, 0, 600, 1, 600);

            thetaIncrement = PowerMap(1, attempt, 0, 600, 0.5d, 0.3d);
            double theta = thetaIncrement * attempt;
            double x = System.Math.Cos(theta) * rad;
            double y = System.Math.Sin(theta) * rad;
            return new Po((int)x, y);
        }

        private double PowerMap(double power, double v, double min1, double max1, double min2, double max2)
        {

            double val = Com.Settinghead.Wexpression.Client.Math.MathUtils.Norm(v, min1, max1);
            val = Math.Pow(val, power);
            return Com.Settinghead.Wexpression.Client.Math.MathUtils.Lerp(min2, max2, val);
        }
    }

}
