// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------

using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Angler;
using Com.Settinghead.Wexpression.Client.Density;
using Com.Settinghead.Wexpression.Client.Model.Vo;
using De.Polygonal.Utils;

using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
namespace Com.Settinghead.Wexpression.Client.Nudger
{


    /*
     Copyright 2010 Daniel Bernier
	
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
	
     http://www.apache.org/licenses/LICENSE-2.0
	
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
     */

    public class ShapeConfinedRandomWordNudger : WordNudger
    {

        // Who knows? this seems to be good, but it seems to depend on the font --
        // bigger fonts need a bigger thetaIncrement.
        //	private double thetaIncrement= Math.PI * 0.03;
        private WordAngler angler;
        private PM_PRNG prng;

        public ShapeConfinedRandomWordNudger()
        {
            this.prng = new PM_PRNG();
            this.retPoint = new Point(0, 0);

        }
        private Point retPoint;

        public virtual Point NudgeFor(WordVO w, PlaceInfo pInfo, int attempt, int totalPlannedAttempt)
        {
            int factor;
            //		if (pInfo != null && pInfo.get().patch != null) {
            Patch p = Patch(pInfo.patch);
            factor = (p.GetWidth() > p.GetHeight()) ? p.GetWidth() : p
                    .GetHeight();
            if (p.GetLevel() == 0)
                factor /= 6;
            else if (p.GetLevel() == 1)
                factor /= 2;
            //		} else
            //			factor = 30;

            factor *= 6;
            retPoint.x = Next(attempt, factor);
            retPoint.y = Next(attempt, factor);
            return retPoint;
        }

        private double Next(int attempt, double stdDev)
        {
            return prng.NextGaussian() * attempt * stdDev;
        }
    }

}
