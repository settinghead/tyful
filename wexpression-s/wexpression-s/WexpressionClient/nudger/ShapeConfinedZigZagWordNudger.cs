// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:01 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Angler;
using Com.Settinghead.Wexpression.Client.Density;
using Com.Settinghead.Wexpression.Client.Model.Vo;

using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;

namespace Com.Settinghead.Wexpression.Client.Nudger
{


    public class ShapeConfinedZigZagWordNudger : WordNudger
    {

        // Who knows? this seems to be good, but it seems to depend on the font --
        // bigger fonts need a bigger thetaIncrement.
        //	private double thetaIncrement= Math.PI * 0.03;
        private WordAngler angler;

        public ShapeConfinedZigZagWordNudger()
        {
            this.retPoint = new Po((int)0, 0);
        }

        private Point retPoint;
        public virtual Point NudgeFor(WordVO w, PlaceInfo pInfo, int attempt, int totalPlannedAttempt)
        {
            int factor;
            attempt = (attempt + pInfo.patch.lastAttempt + totalPlannedAttempt / 2) % totalPlannedAttempt;
            Patch p = Patch(pInfo.patch);
            double unitDistance = Math.Sqrt(p.GetWidth() * p.GetHeight() / totalPlannedAttempt);
            //				Alert.show(unitDistance.toString());
            double x = ((attempt / (pInfo.patch.GetHeight() / unitDistance)) * unitDistance - p.GetWidth() / 2);
            double y = ((attempt % (pInfo.patch.GetHeight() / unitDistance)) * unitDistance - p.GetHeight() / 2);
            x *= 1.5d;
            y *= 1.5d;
            if (attempt % 2 == 0)
            {
                x = p.GetWidth() - x;
                y = p.GetHeight() - y;
            }

            retPoint.x = x;
            retPoint.y = y;
            return retPoint;
        }
    }

}
