// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:00 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using Com.Settinghead.Wexpression.Client;
using Com.Settinghead.Wexpression.Client.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using PureMVC.Interfaces;
using PureMVC.Patterns;

namespace Com.Settinghead.Wexpression.Client.View
{

    public class TuMediator : Mediator
    {
        public static const string NAME = "TuMediator";
        private TuProxy tuProxy;
        private bool waitingForWord;

        public TuMediator(Object viewComponent = null)
            : base(NAME, viewComponent)
        {
            this.waitingForWord = false;
            tuRenderer.addEventListener(TuRenderer.CREAT_NEXT_DISPLAYWORD, createNextDisplayWord);
            tuRenderer.addEventListener(TuRenderer.EDIT_TEMPLATE, editTemplate);
            tuRenderer.addEventListener(TuRenderer.TU_GENERATED, tuGenerated);

        }

        public void OnRegister()
        {
            tuProxy = TuProxy(facade.RetrieveProxy(TuProxy.NAME));
        }

        public override IList<String> ListNotificationInterests()
        {
            return new List(){
					ApplicationFacade.RENDER_TU,
					ApplicationFacade.DISPLAYWORD_CREATED,
					ApplicationFacade.TU_GENERATION_LAST_CALL,
					ApplicationFacade.TU_GENERATED
				};
        }

        override public void HandleNotification(INotification note)
        {
            switch (note.Name)
            {
                case ApplicationFacade.RENDER_TU:
                    tuRenderer.tu = tuProxy.tu;
                    break;
                case ApplicationFacade.DISPLAYWORD_CREATED:
                    if (note.getBody() != null)
                        tuRenderer.slapWord(note.getBody() as DisplayWordVO);
                    break;
                case ApplicationFacade.TU_GENERATION_LAST_CALL:
                    tuRenderer.generateImage();
                    break;
                case ApplicationFacade.TU_GENERATED:
                    if (tuRenderer.autoPostToFacebook) tuProxy.postToFacebook();
                    break;
            }
        }

        private TuRenderer tuRenderer
        {
            get
            {
                return (TuRenderer)viewComponent;
            }
        }

        private void createNextDisplayWord(Event evt0 = null)
        {

            if (!waitingForWord)
            {
                waitingForWord = true;
                int count = 0;
                while (!tuRenderer.tu.finishedDisplayWordRendering && ++count < 3)
                    tuProxy.renderNextDisplayWord(tuRenderer.tu);
                waitingForWord = false;
            }
        }

        private void editTemplate(Event evt0 = null)
        {
            sendNotification(ApplicationFacade.EDIT_TEMPLATE, tuRenderer.tu.template);
        }

        private void tuGenerated(Event evt0 = null)
        {
            //finished rendering; dispatch TU_GENERATED event
            tuProxy.tu = tuRenderer.tu;
            sendNotification(ApplicationFacade.TU_GENERATED, tuRenderer.tu);
        }
    }
}
