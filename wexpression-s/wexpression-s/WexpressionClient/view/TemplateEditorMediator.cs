// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 3/28/12 3:00 AM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------

using Com.Settinghead.Wexpression.Client;
using Java.Awt;
using System;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using PureMVC.Patterns;
using PureMVC.Interfaces;

namespace Com.Settinghead.Wexpression.Client.View
{


    public class TemplateEditorMediator : Mediator
    {

        public static const string NAME = "TemplateEditorMediator";
        private Sprite _colorPicker;
        private Sprite _pen;
        private Sprite _eraser;
        private Sprite _clear;
        private Canvas _canvas;


        public TemplateEditorMediator(Object viewComponent = null)
        {
            super(NAME, viewComponent);
            templateEditor.addEventListener(TemplateEditor.RENDER_TU, renderTu);
            templateEditor.addEventListener(TemplateEditor.SAVE_TEMPLATE, saveTemplate);
            templateEditor.addEventListener(TemplateEditor.UPLOAD_TEMPLATE, uploadTemplate);
        }



        public IList<String> listNotificationInterests()
        {
            return new List(){ApplicationFacade.EDIT_TEMPLATE,
					ApplicationFacade.TEMPLATE_LOADED,
					ApplicationFacade.TEMPLATE_UPLOADED
				};
        }

        public void handleNotification(INotification notification)
        {
            switch (notification.getName())
            {
                case ApplicationFacade.TEMPLATE_LOADED:
                    templateEditor.template = notification.getBody() as TemplateVO;
                    break;
                case ApplicationFacade.TEMPLATE_UPLOADED:
                    Alert.show(notification.getBody().toString());
                    break;
            }
        }


        public String GetMediatorName()
        {
            return TemplateEditorMediator.NAME;
        }

        private TemplateEditor templateEditor
        {
            get
            {
                return (TemplateEditor)viewComponent;
            }
        }

        private void renderTu(Event evt0 = null)
        {
            TuProxy tuProxy = facade.retrieveProxy(TuProxy.NAME) as TuProxy;
            WordListProxy wordListProxy = facade.retrieveProxy(WordListProxy.NAME) as WordListProxy;
            tuProxy.template = templateEditor.template;
            tuProxy.wordList = wordListProxy.currentWordList;
            tuProxy.load();
            facade.sendNotification(ApplicationFacade.RENDER_TU);


        }

        private void saveTemplate(Event evt0 = null)
        {

            facade.sendNotification(ApplicationFacade.SAVE_TEMPLATE, templateEditor.template);
        }

        private void uploadTemplate(Event evt0 = null)
        {
            facade.sendNotification(ApplicationFacade.UPLOAD_TEMPLATE, templateEditor.template);
        }

    }
}
