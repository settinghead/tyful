#include <string>
struct SlapInfo;
struct Dimension;
void setPerseverance(int perseverance);
void feedShape(unsigned int *pixels, int width, int height, unsigned int sid,bool flip, bool rgbaToArgb,double shrinkage);
int getStatus();
void initCanvas();
void modifyCanvas();
void setStatus(int status);
double getShrinkage();
void appendLayer(unsigned int *pixels, unsigned int *colorPixels, int width, int height,bool flip,bool rgbaToArgb);
void appendLayer(unsigned int *combinedPixels, int width, int height,bool flip,bool rgbaToArgb);
void appendLayer(unsigned char *png, size_t png_size);
void updateTemplate(unsigned int *data);
void updateTemplate(unsigned int *zipData,int size);
void feedShape(unsigned int *data, double shrinkage);
void startRendering();
//void pauseRendering();
SlapInfo getNextSlap();
SlapInfo tryNextShape();
SlapInfo slapShape(unsigned int *pixels, int width, int height,unsigned int sid);
unsigned int getNumberOfPendingShapes();
Dimension getCanvasSize();
void resetFixedShapes();
std::string setFixedShape(int sid, double x, double y, double rotation,double scaleX,double scaleY);
void serializeTemplate(unsigned int* previewPixels, int width, int height, unsigned char*& output, int& length);
void serializeTemplate(unsigned char* previewPng, int len, unsigned char*& output, int& length);
void loadTemplateFromSerialization(unsigned char *data, int length);
