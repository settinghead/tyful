package com.settinghead.wenwentu.service;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.logging.Logger;

import java.io.IOException;
import java.io.StringWriter;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.restfb.types.Post;
import com.settinghead.wenwentu.service.model.Task;
import com.settinghead.wenwentu.service.model.Word;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisPubSub;
import redis.clients.jedis.Protocol;

public class WordListService {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7273080441350794168L;
	static Logger logger = Logger.getLogger(WordListService.class.getName());

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		runWordListService();

		// Server server = new Server(Integer.valueOf(System.getenv("PORT")));
		// ServletContextHandler context = new ServletContextHandler(
		// ServletContextHandler.SESSIONS);
		// context.setContextPath("/");
		// server.setHandler(context);
		// context.addServlet(new ServletHolder(new WordListService()), "/*");
		// server.start();
		// server.join();
	}

	private static void runWordListService() {
		logger.info("Starting word list service. ");
		try {
			URI redisURI = new URI(System.getenv("REDISTOGO_URL"));
			final JedisPool pool = new JedisPool(new JedisPoolConfig(),
					redisURI.getHost(), redisURI.getPort(),
					Protocol.DEFAULT_TIMEOUT, redisURI.getUserInfo().split(":",
							2)[1]);
			Jedis jedis = pool.getResource();

			try {
				while (true) {
					String message;
					while ((message = jedis.rpop("q")) == null)
						Thread.sleep(500);
					logger.info(message);
					ObjectMapper mapper = new ObjectMapper();
					Task task;
					try {
						task = mapper.readValue(message, Task.class);
						if (!jedis.exists("shop_" + task.getProvider() + "_"
								+ task.getUid())) {
							List<Post> messages = FacebookRetriever
									.getMessages(task.getUid(), task.getToken());
							List<Word> wordList = FacebookRetriever
									.parseWordList(task.getUid(),
											task.getToken(), messages);
							StringWriter sw = new StringWriter();
							mapper.writeValue(sw, wordList);
							jedis.set(
									"wl_" + task.getProvider() + "_"
											+ task.getUid(), sw.toString());
							logger.info("wl_" + task.getProvider() + "_"
									+ task.getUid() + " written to cache.");
						}
					} catch (Exception e) {
						logger.warning(e.getMessage());
					}

				}

			} catch (InterruptedException e) {
				logger.warning(e.getMessage());
			} finally {
				// / ... it's important to return the Jedis instance to
				// the pool
				// once you've finished using it
				pool.returnResource(jedis);
			}
		} catch (URISyntaxException e) {
			// URI couldn't be parsed. Handle exception
		}
	}
}
