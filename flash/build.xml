<!-- This is intended to be a simple build file, created a suggestion for 
	the necessary steps need to utilize the FlexUnit4 Ant task. For the most 
	detail when running this build, call "ant -v clean package". The build uses 
	a simple lifecycle of: init->compile->test->package The end goal is to produce 
	a zip of a website you could deploy for your application. This build is not 
	intended to be an example for how to use Ant or the Flex SDK Ant tasks. This 
	is just one possible way to utilize the FlexUnit4 Ant tasks. -->
<project name="FlexUnit4SampleProject" basedir="." default="package">
	<!-- setup a prefix for all environment variables -->
	<property environment="env" />

	<!-- Setup paths for build -->
	<property name="main.src.loc" location="${basedir}/src/main/flex" />
	<property name="test.src.loc" location="${basedir}/src/test/flex" />
	<property name="res.src.loc" location="${basedir}/src/main/resources" />
	<property name="lib.loc" location="${basedir}/libs" />
	<property name="output.loc" location="${basedir}/target" />
	<property name="bin.loc" location="${basedir}/bin-release" />
	<property name="secure.loc" location="${basedir}/bin-secure" />
	<property name="export.loc" location="${basedir}/../static/f/client" />
	<property name="report.loc" location="${output.loc}/report" />

	<!-- Setup Flex and FlexUnit ant tasks -->
	<!-- You can set this directly so mxmlc will work correctly, or set FLEX_HOME 
		as an environment variable and use as below -->
	<property name="FLEX_HOME" location="${env.FLEX_HOME}" />
	<taskdef resource="flexTasks.tasks" classpath="${env.FLEX_HOME}/ant/lib/flexTasks.jar" />
	<!-- <taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks.jar" 
		/> -->
	<target name="clean">
		<!-- Remove all directories created during the build process -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${output.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<target name="init">
		<!-- Create directories needed for the build process -->
		<mkdir dir="${output.loc}" />
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${report.loc}" />
	</target>

	<target name="compile" depends="init">
		<!-- Compile Main.mxml as a SWF -->
		<mxmlc
			file="${main.src.loc}/com/settinghead/tyful/client/TyfulClient.mxml" output="${bin.loc}/TyfulClient.swf">
			<source-path path-element="${main.src.loc}" />
			<library-path dir="${lib.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>
	</target>

	<target name="test" depends="compile">
		<!-- Compile TestRunner.mxml as a SWF -->
		<mxmlc
			file="${test.src.loc}/com/settinghead/tyful/client/TestRunner.mxml"
			output="${bin.loc}/TestRunner.swf">
			<source-path path-element="${main.src.loc}" />
			<library-path dir="${lib.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			<compiler.verbose-stacktraces>true</compiler.verbose-stacktraces>
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>

		<!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
		<flexunit swf="${bin.loc}/TestRunner.swf" toDir="${report.loc}"
			haltonfailure="false" verbose="true" localTrusted="false" />

		<!-- Generate readable JUnit-style reports -->
		<junitreport todir="${report.loc}">
			<fileset dir="${report.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.loc}/html" />
		</junitreport>
	</target>

	<target name="package" depends="test">
		<!-- Assemble final website -->
		<copy file="${bin.loc}/Main.swf" todir="${output.loc}" />
		<html-wrapper swf="Main" template="express-installation"
			output="${output.loc}" height="100%" width="100%" />

		<!-- Zip up final website -->
		<zip destfile="${output.loc}/${ant.project.name}.zip">
			<fileset dir="${output.loc}" />
		</zip>
	</target>
	
	<taskdef name="protect" classpath="secureSWF/secureSWF.jar"
	classname="secureSWF.ant.ProtectTask" />
	  <target name="protect">
	  <!-- <target name="protect"> -->
	    <protect outputPath="${secure.loc}" 
	    	renameIdentifiers="true" 
	    	controlflow="0"
	    	keyFilePath="${basedir}/secureSWF/key.data">
		      <fileset dir="${bin.loc}" includes="TyfulClient.swf"/>
		      <!-- <fileset dir="${bin.loc}" includes="**.swc"/> -->
			<rule filter="com.settinghead.tyful.client.*" rename="false" />
		    <rule filter="com.settinghead.tyful.client.angler.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.colorer.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.model.vo.algo.*" rename="true" controlflowobfuscation="0" />
		    <rule filter="com.settinghead.tyful.client.model.zip.*" controlflowobfuscation="0" rename="false" />
		    <rule filter="PNGEncoder2.*" controlflowobfuscation="0" rename="false" />
		    <rule filter="DeflateStream.*" controlflowobfuscation="0" rename="false" />
		    <rule filter="_PNGEncoder2.*" controlflowobfuscation="0" rename="false" />
	    	<rule filter="CompressionLevel.*" controlflowobfuscation="0" rename="false" />
		    <rule filter="com.settinghead.tyful.client.model.proxy.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.nudger.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.placer.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.sizers.*" rename="true" />
		    <rule filter="com.settinghead.tyful.client.view.components.template.*" rename="false" />
		    <rule filter="com.settinghead.tyful.client.view.components.template.canvas.*" rename="false" />
		    <rule filter="com.settinghead.tyful.client.view.components.template.canvas.assets.*" rename="false" />

	      <!--literalString value="sEc.R3t"/-->
	      <domainName value="tyful.me" />
	      <domainName value="www.tyful.me"/>
	</protect>
	
	<!-- <exec executable="secureSWF/secureSWF"> -->
	    <!-- <arg value="${bin.loc}/TyfulClient.swf"/> -->
	    <!-- <arg value="${secore.loc}"/> -->
	  <!-- </exec> -->
	  </target>
	
	<!-- <target name="ccc" depends="protect">
	    <copy todir="${export.loc}" overwrite="true">
		    <fileset dir="${secure.loc}"/>
		</copy>
	</target> -->
	
	<target name="copy-insecure">
	    <copy todir="${export.loc}">
		    <fileset dir="${bin.loc}"/>
		</copy>
	</target>
	
	<target name="versionInfo">
	        <propertyfile
	            file="version.properties" comment="Build version info">
	            <entry key="buildDate" type="date" value="now"/>
	            <entry key="buildNum" default="0" type="int" operation="+" value="1"/>
	        </propertyfile>
	        <copy file="${res.src.loc}/version.txt" tofile="${export.loc}/version.txt" overwrite="true" />
	        <replace
	            file="${export.loc}/version.txt"
	            value="value not found in version.properties"
	            propertyFile="version.properties">
	            <replacefilter
	                token="@buildDate@"
	                property="buildDate"/>
	            <replacefilter
	                token="@buildNum@"
	                property="buildNum"/>
	        </replace>
	    </target>
	
	<target name="copy-secure">
		<copy todir="${export.loc}" overwrite="true">
				    <fileset dir="${secure.loc}"/>
				</copy>
	</target>
	
	<target name="publish" depends="compile, copy-insecure, protect, versionInfo, copy-secure">
	</target>
	
	<target name="secure-only" depends="copy-insecure, protect, versionInfo, copy-secure">
	</target>
		
</project>