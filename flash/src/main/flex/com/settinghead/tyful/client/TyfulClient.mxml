<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:debugger="com.demonsters.debugger.*" 
			   creationComplete="application1_creationCompleteHandler(event)" 
			   xmlns:components="com.settinghead.tyful.client.view.components.*" 
			   xmlns:client="com.settinghead.tyful.client.*"
			   implements="polartree.PolarTree.vfs.ISpecialFile" 
			   >
	<fx:Style source="TyfulClient.css"/>
	<fx:Style source="/assets/styles/styles.css" />
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.settinghead.tyful.client.model.ITuImageGenerator;
			import polartree.PolarTree.CModule;
			
			import mx.events.FlexEvent;
			private var facade:ApplicationFacade = ApplicationFacade.getInstance();
			public var tuImageGenerator:ITuImageGenerator;
			
			protected function text1_mouseOverHandler(event:MouseEvent):void
			{
//				(event.target as ApplicationControlBar).alpha = 0.3;
			}
			
			protected function text1_mouseOutHandler(event:MouseEvent):void
			{
//				(event.target as ApplicationControlBar).alpha = 0.8;
			}
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				
//				CModule.rootSprite = this.parent;
//				CModule.vfs.console = this;
//				if(CModule.runningAsWorker()) {
//					return;
//				}
//				CModule.startAsync(this);
				
				facade.startup(this);
			}
			
			/**
			 * The callback to call when FlasCC code calls the posix exit() function. Leave null to exit silently.
			 * @private
			 */
			public var exitHook:Function;
			/**
			 * The PlayerKernel implementation will use this function to handle
			 * C process exit requests
			 */
			public function exit(code:int):Boolean
			{
				// default to unhandled
				return exitHook ? exitHook(code) : false;
			}
			
			/**
			 * The PlayerKernel implementation will use this function to handle
			 * C IO write requests to the file "/dev/tty" (e.g. output from
			 * printf will pass through this function). See the ISpecialFile
			 * documentation for more information about the arguments and return value.
			 */
			public function write(fd:int, bufPtr:int, nbyte:int, errnoPtr:int):int
			{
				var str:String = CModule.readString(bufPtr, nbyte)
				consoleWrite(str)
				return nbyte
			}
			
			/**
			 * The PlayerKernel implementation will use this function to handle
			 * C IO read requests to the file "/dev/tty" (e.g. reads from stdin
			 * will expect this function to provide the data). See the ISpecialFile
			 * documentation for more information about the arguments and return value.
			 */
			public function read(fd:int, bufPtr:int, nbyte:int, errnoPtr:int):int
			{
				return 0
			}
			
			/**
			 * The PlayerKernel implementation will use this function to handle
			 * C fcntl requests to the file "/dev/tty" 
			 * See the ISpecialFile documentation for more information about the
			 * arguments and return value.
			 */
			public function fcntl(fd:int, com:int, data:int, errnoPtr:int):int
			{
				return 0
			}
			
			/**
			 * The PlayerKernel implementation will use this function to handle
			 * C ioctl requests to the file "/dev/tty" 
			 * See the ISpecialFile documentation for more information about the
			 * arguments and return value.
			 */
			public function ioctl(fd:int, com:int, data:int, errnoPtr:int):int
			{
				return 0
			}
			
			/**
			 * Helper function that traces to the flashlog text file and also
			 * displays output in the on-screen textfield console.
			 */
			protected function consoleWrite(s:String):void
			{
				trace(s);
			}
			
			/**
			 * Provide a way to get the TextField's text.
			 */
			public function get consoleText():String
			{
				var txt:String = null;
				
				return txt;
			}

			
		]]>
	</fx:Script>
	<components:Application id="applicationComponent" width="100%" height="100%" >
	</components:Application>	
		
	<mx:ApplicationControlBar verticalAlign="middle" dock="true" right="0" bottom="0" alpha="0.8" mouseEnabled="false"
							  mouseOver="text1_mouseOverHandler(event)"
							  mouseOut="text1_mouseOutHandler(event)"
							  >
		<mx:Text text="Tyful" fontFamily="Verdana" fontSize="22" fontStyle="normal" color="#0559CC" mouseEnabled="false"
				 />
		<!--mx:Label fontWeight="bold" text="Create your own typography artwork."/-->
	</mx:ApplicationControlBar>

	<!--debugger:MonsterDebuggerFlex id="monsterDebugger"/-->

</s:Application>
