<?xml version="1.0" encoding="utf-8"?>
<!--
 PureMVC AS3 Demo - Flex Employee Admin 
 Copyright (c) 2007-10 Clifford Hall <clifford.hall@puremvc.org>
 Your reuse is governed by the Creative Commons Attribution 3.0 License
-->
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:client="com.settinghead.groffle.client.*" 
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:template="com.settinghead.groffle.client.view.components.template.*" xmlns:canvas="com.settinghead.groffle.client.view.components.template.canvas.*"
	 creationComplete="creationCompleteHandler(event)" xmlns:components="com.settinghead.groffle.client.view.components.*"
	 keyDown="editor_keyDownHandler(event)"
	 xmlns:windows="com.settinghead.groffle.client.view.components.template.windows.*" click="canvas1_clickHandler(event)" >
	
	<!-- Events dispatched by this View Component -->
	<mx:Metadata>
		[Event(name="createTemplate", type="com.settinghead.groffle.client.view.components.template.CreateTemplateEvent")]
		
	</mx:Metadata>

	<mx:Style>
		
		.errorTip {
			color: #000000;
			fontSize: 12;
			fontWeight: "bold";
			shadowColor: #000000;
			borderColor: #B9FF73;
			borderStyle: "errorTipRight";
			paddingBottom: 4;
			paddingLeft: 4;
			paddingRight: 4;
			paddingTop: 4;
			backgroundColor: #B9FF73;
		}
		.render-button {
			cornerRadii: 16, 0, 16, 0;
			borderColors: #006699, #006699;
			overBorderColors: #003399, #003399;
			selectedBorderColors: #003399, #003399;
			borderThickness: 3;
			fillColors: #FCFFF4, #006699, #0066CC, #00CCFF;
			fillAlphas: 0.5, 0.5, 0.5, 0.5;
			fillColorRatios: 0, 85, 170, 255;
			overFillColors: #FCFFF4, #006699, #0066CC, #00CCFF;
			overFillAlphas: 0.5, 0.5, 0.5, 0.5;
			overFillColorRatios: 0, 85, 170, 255;
			selectedFillColors: #FCFFF4, #006699;
			selectedFillAlphas: 0.5, 0.5;
			selectedFillColorRatios: 0, 255;
			color: #FFFFFF;
			textRollOverColor: #FFFFFF;
		}
		.mainCanvasArea{
			paddingBottom: 5;
			paddingTop: 5;
			paddingLeft: 5;
			paddingRight: 5;
		}

	</mx:Style>
	
	<mx:states>
		<mx:State name="TextFlowMouseDown"/>
	</mx:states>
			<s:VGroup left="0" top="0" width="100%" height="100%">
				<s:VGroup mouseOver="controlArea_mouseOverHandler(event)" left="0" top="0" height="80" width="100%">
					<s:HGroup>
						<s:Label width="170" />
						<mx:LinkBar id="toggleButtonBar"
											dataProvider="{ribbonViewStack}" />						

						<s:Button id="btnRender" click="btnRender_clickHandler(event)" label="Create artwork!" 
								  toolTip="When you are done, click this button to create your word cloud." skinClass="com.settinghead.groffle.client.view.components.template.CreateButtonSkin" />
						
						<mx:HBox 
							enabled="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
							visible="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
							includeInLayout="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
							>
							<s:Button click="btnUploadTemplate_clickHandler(event)" label="Save/share your template"
									  toolTip="Show off your artistic talent by sharing your template with others."/>
						</mx:HBox>
					</s:HGroup>
					<mx:ViewStack backgroundColor="#EDEDED" id="ribbonViewStack"  visible="{toggleButtonBar.selectedIndex>=0}"
					 width="1000" height="45" paddingBottom="5" paddingTop="5" paddingLeft="10" paddingRight="10" selectedIndex="1">
						<mx:HBox label="File">
							<s:Button id="btnOpenTemplate" click="btnOpenTemplate_clickHandler(event)" label="Open template file" />
							<s:Button id="btnSaveTemplate" click="btnSaveTemplate_clickHandler(event)" label="Save template to file..." />
							<mx:HBox 
								enabled="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
								visible="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
								includeInLayout="{decodeURIComponent(FlexGlobals.topLevelApplication.parameters.token).length>0 || (decodeURIComponent(FlexGlobals.topLevelApplication.parameters.mode as String)) == ApplicationFacade.MODE_NEW_TEMPLATE}"
								>
								<s:Button id="btnUploadTemplate" click="btnUploadTemplate_clickHandler(event)" label="Save/share your template" 
										  toolTip="Show off your artistic talent by sharing your template with others." />
								<s:CheckBox id="chkRerenderThumbnail" label="Rerender thumbnail preview" />								
							</mx:HBox>

						</mx:HBox>
							<mx:ViewStack label="Drawing" id="drawingOptionsViewStack" visible="{drawingToolBar.selectedIndex >=0}" selectedIndex="@{drawingToolBar.selectedIndex}"
										  left="0" top="0" right="0" bottom="0" width="1000" height="45" change="drawingOptionsViewStack_changeHandler(event)">
								<mx:HBox label="Brush">
									<mx:Label text="Angle: " />
									<template:DirectionPicker label="Text direction" id="directionPicker" angle="@{this.angle}" />
									<mx:Label text="Thickness: " />
									<template:ThicknessPicker label="Brush size" id="thicknessPicker" thickness="@{this.thickness}"  />
									<s:Label text="Colors: " />
									<template:MultiColorPicker label="Text color" id="colorPicker" mixColorDistance="{template.mixColorDistance}" />
								</mx:HBox>
								<mx:HBox label="Fill">
									<mx:Label text="Fill tool is a work in progress. Please check back soon." />
								</mx:HBox>
								<mx:HBox label="Erase">
									<mx:Label text="Thickness: " />
									<template:ThicknessPicker label="Brush size" id="eraseThicknessPicker"  />
								</mx:HBox>
							</mx:ViewStack>
						<mx:HBox label="Help">
							
						</mx:HBox>
						
					</mx:ViewStack>
				</s:VGroup>
				<s:HGroup left="0" right="0">

					<s:VGroup id="paintToolBar">
						<mx:ToggleButtonBar
							direction="vertical"
							 itemClick="drawingToolBar_itemClickHandler(event)"
							toggleOnClick="false" id="drawingToolBar"
							 selectedIndex="2" 
							>
							<mx:dataProvider>
								<mx:Object label="Brush" 
										   icon="@Embed(source='brush.png')" />
								<mx:Object label="Fill" 
										   icon="@Embed(source='fill.png')" />
								<mx:Object label="Erase" 
										   icon="@Embed(source='eraser.png')"/>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						
					</s:VGroup>
				<s:HGroup id="mainCanvasArea" top="80" bottom="0" left="0" right="0" styleName="mainCanvasArea">
					<mx:Canvas top="0" bottom="0" left="0" right="0">
							<mx:UIComponent id="cvnTransparentBackground" visible="true" />
							<components:LayerStack id="layers" dataProvider="{template.layers}" width="{template.width}" height="{template.height}"
												   itemRendererFunction="layers_itemRendererFunc"  >
							</components:LayerStack>
							<!--template:PatchLayer id="patchLayer" visible="true" /-->
					</mx:Canvas>

					
					<s:VGroup id="layerNavigation" mouseOver="controlArea_mouseOverHandler(event)" top="0" bottom="0" width="100" right="0">
						<s:Button id="btnShowAllLayers" label="All" />
						<s:List id="layerButtons" dragEnabled="true" dropEnabled="true" width="80" 
								dataProvider="{template.layers}" 
								itemRenderer="com.settinghead.groffle.client.view.components.template.canvas.LayerButton"
								>
							<s:layout>
								<s:VerticalLayout />
							</s:layout>
						</s:List>
						<s:Button id="btnAddLayer" label="+"  click="btnAddLayer_clickHandler(event)"/>
					</s:VGroup>
				</s:HGroup>
				</s:HGroup>
			</s:VGroup>
		<!--s:NavigatorContent label="Background">
			<s:Button label="Upload a photo..." id="btnUpload" click="btnUpload_clickHandler(event)"/>
		</s:NavigatorContent-->
	<mx:Script>
		<![CDATA[
			import com.notifications.Notification;
			import com.settinghead.groffle.client.ApplicationFacade;
			import com.settinghead.groffle.client.model.vo.BBPolarTreeVO;
			import com.settinghead.groffle.client.model.vo.template.Layer;
			import com.settinghead.groffle.client.model.vo.template.TemplateVO;
			import com.settinghead.groffle.client.model.vo.template.WordLayer;
			import com.settinghead.groffle.client.view.components.template.canvas.TextFlowCanvas;
			import com.settinghead.groffle.client.view.components.template.windows.NewTemplateWindow;
			
			import flash.display.*;
			import flash.display.Sprite;
			import flash.events.*;
			import flash.events.MouseEvent;
			import flash.net.*;
			import flash.utils.ByteArray;
			
			import flashx.textLayout.elements.BreakElement;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.ToolTip;
			import mx.core.BitmapAsset;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			
			import org.as3commons.lang.HashArray;
			import org.peaceoutside.utils.ColorMath;
			
			import spark.events.IndexChangeEvent;
			
//			public static const MODE_EDIT:String 	= "modeEdit";
			
//			[Bindable] public var mode:String;
//			
//			public function setTemplate( template:TemplateVO, mode:String ):void
//			{
//				this.mode = mode;
//				this.template = template;
//			}
			// ------- Constants -------
			// Display states
			private static const LOAD:uint = 0;
			private static const PROGRESS:uint = 1;

			public static const RENDER_TU:String = "renderTu";
			public static const SAVE_TEMPLATE:String = "saveTemplate";
			public static const OPEN_TEMPLATE:String = "openTemplate";
			public static const UPLOAD_TEMPLATE:String = "uploadTemplate";
			public static const CREATE_TEMPLATE:String = "createTemplate";
			
			public static const BRUSH:int = 0;
			public static const FILL:int = 1;
			public static const ERASE:int = 2;
			[Bindable]
			public var currentDrawingTool:int = BRUSH;
			
			private var mType:int;
			
			[Embed(source="brush.png")]
			public var brushIcon:Class;
			[Embed(source="eraser.png")]
			public var eraserIcon:Class;
			[Embed(source="fill.png")]
			public var fillIcon:Class;
			
			private var brushIconObj:Object = {icon:brushIcon};
			private var eraserIconObj:Object = {icon:eraserIcon};
			private var fillIconObj:Object = {icon:fillIcon};
			
			[Bindable]
			public var drawingButtons :Array  = [brushIconObj, fillIconObj, eraserIconObj];
			
			public var newWidth:Number = -1, newHeight:Number = -1;
			[Bindable]
			public var thickness:int = 40;
			[Bindable]
			public var angle:Number;
			
			[Bindable]
			public var colorPattern:BitmapData;
			
			private var _template:TemplateVO;
			
			private var _loadFile:FileReference;
			private var jagFileRefSave:FileReference = new FileReference();
			private var loader:Loader = new Loader();
			private var imagesFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png");
			private var newTemplateDialog:NewTemplateWindow;

			// ------- Child controls -------
			// Common view/containers
			private var _imageContainer:Sprite;
			private var _currentViewContainer:Sprite;
			
//			protected function btnUpload_clickHandler(event:MouseEvent):void
//			{
//				jagFileRefSave.browse([imagesFilter]);
//				jagFileRefSave.addEventListener(Event.SELECT, selectedFile);
//			}
//			
//			
//			private function onClickSave(e:MouseEvent):void{    
//				jagFileRefSave.browse([imagesFilter]);
//				jagFileRefSave.addEventListener(Event.SELECT, selectedFile);
//			}        
//			private function selectedFile(e:Event):void{
//				jagFileRefSave.load();
//				jagFileRefSave.addEventListener(Event.COMPLETE, loaded);
//			}
//			private function loaded(e:Event):void{
//				var rawBytes:ByteArray = jagFileRefSave.data;
//				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, getBitmapData);
//				loader.loadBytes(rawBytes);
//			}
//			private function getBitmapData(e:Event):void{
//				backgroundLayer.addChild(loader);
//			}
			
			public function get template():TemplateVO{
				return _template;
			}
			
			[Bindable] public function set template(_template:TemplateVO):void{
				
				this._template = _template;
//				this.layersMap = new HashArray("name",false,_template.layers.toArray());
				this.callLater(drawTransparentBackground);

			}
			public var myTip:ToolTip;

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				//disable fill button (not yet implemented)
				(this.drawingToolBar.getChildAt(TemplateEditor.FILL) as mx.controls.Button).enabled = false;
				this.newTemplateDialog = new NewTemplateWindow();
				this.newTemplateDialog.addEventListener(NewTemplateWindow.CREATE_TEMPLATE, createTemplate);
				BindingUtils.bindProperty(this, "colorPattern", this.colorPicker, "colorPattern");
				BindingUtils.bindProperty(this,"currentDrawingTool", this.drawingToolBar, "selectedIndex");
				
				//select brush after creation complete in order to show growl tips
				this.drawingToolBar.selectedIndex  = BRUSH;
				
				
					var s:String = "You are currently editing an artwork tempalte.\nClick this button to create your personalized artwork with information from your Facebook timeline and profile."
					myTip = ToolTipManager.createToolTip(s,btnRender.x,btnRender.y+btnRender.height,"errorTipBelow",btnRender) as ToolTip;
					myTip.setStyle("backgroundColor",0xFFCC00);
					BindingUtils.bindProperty(myTip, "visible", this,"visible");
					
			}
			protected function canvas1_clickHandler(event:MouseEvent):void
			{
					ToolTipManager.destroyToolTip(myTip);
				
			}
			
			protected function btnRender_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(RENDER_TU));	
			}
			
			protected function btnSaveTemplate_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(SAVE_TEMPLATE));	
			}
			protected function btnOpenTemplate_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(OPEN_TEMPLATE));	
			}
			protected function btnUploadTemplate_clickHandler(event:MouseEvent):void
			{
				if(chkRerenderThumbnail.selected)
					template.preview = null;
				dispatchEvent(new Event(UPLOAD_TEMPLATE));	
			}
			
			protected function drawTransparentBackground():void
			{
				var bmpdTile:BitmapData  = new BitmapData(30,30);
				var spriteTile:Sprite = new Sprite();
				spriteTile.graphics.beginFill(0xeeeeee, 1.0);
				spriteTile.graphics.drawRect(0,0,15,15);
				spriteTile.graphics.drawRect(15,15,30,30);
				spriteTile.graphics.endFill();
				bmpdTile.draw(spriteTile);
				
				cvnTransparentBackground.width = this.template.width;
				cvnTransparentBackground.height = this.template.height;
				cvnTransparentBackground.graphics.
					beginBitmapFill(bmpdTile,null,true,true);
				cvnTransparentBackground.graphics.drawRect(
					0, 0, this.template.width, this.template.height);
				cvnTransparentBackground.graphics.endFill();
			}
			
			protected function editor_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.Z){
					this.thickness += 1;
				}
				else if (event.keyCode == Keyboard.X){
					this.thickness -= 1;
				}
				else if (event.keyCode == Keyboard.S){
					this.angle -= 0.05;
				}
				else if (event.keyCode == Keyboard.A){
					this.angle += 0.05;
				}
			}
			
			protected function btnAddLayer_clickHandler(event:MouseEvent):void
			{
				new WordLayer(
					"Layer"+(template.layers.length+1).toString(),template);
			}
			
			private function layers_itemRendererFunc(item:Object):ClassFactory {
				super.commitProperties();
				var cla:Class;
				if(item is WordLayer){
					cla = TextFlowCanvas;
				}
				var renderer:ClassFactory = new ClassFactory(cla);
				renderer.properties = 
					{templateEditor: this, depth: template.layers.length};
				var tfc:TextFlowCanvas;
				return renderer;
			}
			
			public function initColors():void{
				colorPicker.initColors();
			}
			
			protected function controlArea_mouseOverHandler(event:MouseEvent):void
			{
				Mouse.show();
			}
			
			public function newTemplate():void{
				newTemplateDialog.newWidth = TemplateVO.DEFAULT_WIDTH;
				newTemplateDialog.newHeight = TemplateVO.DEFAULT_HEIGHT;
				newTemplateDialog.visible = true;
				PopUpManager.addPopUp(newTemplateDialog,this,true);
				PopUpManager.centerPopUp(newTemplateDialog);
			}
			
			public function createTemplate(e:CreateTemplateEvent):void{
				dispatchEvent(new CreateTemplateEvent(TemplateEditor.CREATE_TEMPLATE, e.width, e.height));	
			}
			

			
			protected function drawingToolBar_itemClickHandler(event:ItemClickEvent):void
			{
				// TODO Auto-generated method stub
				
			}

			protected function drawingOptionsViewStack_changeHandler(event:IndexChangedEvent):void
			{
				switch(event.newIndex){
					case BRUSH:
						
						break;
					case FILL:
						break;
					case ERASE:
						break;
				}
			}
			
	
			
		]]>
	</mx:Script>
	

</mx:Canvas>