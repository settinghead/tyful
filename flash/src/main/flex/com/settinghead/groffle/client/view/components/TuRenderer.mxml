<?xml version="1.0" encoding="utf-8"?>
<!--
 PureMVC AS3 Demo - Flex Employee Admin 
 Copyright (c) 2007-10 Clifford Hall <clifford.hall@puremvc.org>
 Your reuse is governed by the Creative Commons Attribution 3.0 License
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationCompleteHandler(event)" show="onCreationCompleteHandler(event)" 
		 xmlns:template="com.settinghead.groffle.client.view.components.template.*"
		  mouseOver="canvas1_mouseOverHandler(event)" enterFrame="onEnterFrameHandler(event)"
		   implements="com.settinghead.groffle.client.model.ITuImageGenerator"
		    initialize="canvas1_initializeHandler(event)"
		 >
	
	<!-- Events dispatched by this View Component -->
	<fx:Metadata>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import com.settinghead.groffle.client.PlaceInfo;
			import com.settinghead.groffle.client.density.Patch;
			import com.settinghead.groffle.client.model.vo.BBPolarTreeVO;
			import com.settinghead.groffle.client.model.vo.DisplayWordListVO;
			import com.settinghead.groffle.client.model.vo.DisplayWordVO;
			import com.settinghead.groffle.client.model.vo.EngineWordVO;
			import com.settinghead.groffle.client.model.vo.TuVO;
			
			import flash.filters.GlowFilter;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.codec.PNGEncoder;
			
			import org.as3commons.collections.framework.IIterator;
			import org.as3commons.lang.Assert;
			
			
			public static const UPDATE_PROGRESS:String = "updateProgress";
			public static const EDIT_TEMPLATE:String = "editTemplate";
			public static const POST_TO_FACEBOOK:String = "postToFacebook";
			public static const EFFECTIVE_MARGIN:int = 5;

			
			[Bindable] private var _driftDistanceSum:Number = 0;
			[Bindable] public var autoPostToFacebook:Boolean = true;

			
			private var _tu:TuVO;
			
			public function slapWord(dWord:DisplayWordVO):void{
				this.wordLayer.addChild(dWord);
				this._tu.dWords.addItem(dWord);
//				patchLayer.graphics.clear();
//				for each(var pi:PlaceInfo in dWord.engineWord.desiredLocations)
//					this.highlightPatch(pi.patch);
				dWord.addEventListener(MouseEvent.ROLL_OVER,wordMouseOver);
				dWord.addEventListener(MouseEvent.ROLL_OUT,wordMouseOut);
					dWord.useHandCursor= true;
					dWord.buttonMode = true;
//					dWord.mouseChildren = true;
					dWord.addEventListener(MouseEvent.CLICK, wordClick);

				this._driftDistanceSum += dWord.engineWord.offsetDistance;
				
//								patchLayer.patchQueue = patchLayer.patchQueue;

			}
			
			private function wordClick(e:MouseEvent):void{
				var dWord:DisplayWordVO = e.target as DisplayWordVO;
				if(dWord!=null && 
					dWord.engineWord!=null && dWord.engineWord.word!=null && 
					dWord.engineWord.word.occurences!=null 
					&& dWord.engineWord.word.occurences.length>0){
					if(dWord.engineWord.word.occurences[0].link!=null)
						navigateToURL(new URLRequest(
							(dWord.engineWord.word.occurences[0].link
								as String)), '_blank');
					    navigateToURL(new URLRequest(
							"http://www.facebook.com/"+
							(dWord.engineWord.word.occurences[0].id as String).replace('_','/posts/')), '_blank');
				}
			}
			
			protected function btnEditTemplate_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(EDIT_TEMPLATE));
			}
			
			protected function btnMoreWords_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(EDIT_TEMPLATE));
			}
			
			protected function btnSaveAsPng_clickHandler(event:MouseEvent):void{
				tu.generatedImage = canvasImage(1500);
				var encoder:PNGEncoder = new PNGEncoder();
				var bild:ByteArray = encoder.encode(_tu.generatedImage);
				var file:FileReference = new FileReference();
				file.save(bild, "tu.png");
			}
			
			protected function btnForceFinish_clickHandler(event:MouseEvent):void{
				perseveranceSlider.value = perseveranceMeter.value;
			}
			
			
			public function wordMouseOver(e:MouseEvent):void{
				var dWord:DisplayWordVO = e.target as DisplayWordVO;
				dWord.filters = [new GlowFilter(dWord.textField.textColor,0.3,
					dWord.textField.textHeight/5,dWord.textField.textHeight/5,
					dWord.textField.textHeight/16,1,false)];
//				patchLayer.graphics.clear();
//				for each(var pi:PlaceInfo in dWord.engineWord.desiredLocations)
//					this.highlightPatch(pi.patch);
//				dWord.visible = false;
//				drawTree(dWord.engineWord.bbTree);
//				drawSamplePoints(dWord.engineWord);
			}
			
			private function drawSamplePoints(ew:EngineWordVO):void{
//				treeLayer.graphics.clear();
				treeLayer.graphics.beginFill(0xcccccc,1.0);
				for(var i:int = 0 ;i<ew.samplePoints.length;i++){
					var theta:Number = (ew.samplePoints[i] as Array)[0];
					var d:Number = (ew.samplePoints[i] as Array)[1];
					theta -= ew.bbTree.getRotation();
					var x:Number = ew.bbTree.getRootX() + Math.cos(theta) * d;
					var y:Number = ew.bbTree.getRootY() + Math.sin(theta) * d;
					
					treeLayer.graphics.drawCircle(x,y,2);
				}
				treeLayer.graphics.endFill();
			}
			
			public function wordMouseOut(e:MouseEvent):void{
				var dWord:DisplayWordVO = e.target as DisplayWordVO;
				dWord.filters=[];
//				dWord.visible = true;
			}
			
			public function highlightPatch(patch:Patch):void{
//				patchLayer.graphics.beginFill(0xCCCCCC,0.5);
//				patchLayer.graphics.drawRect(patch.getX(), patch.getY(), patch.getWidth(), patch.getHeight());
//				patchLayer.graphics.endFill();
			}
			
			private function drawTree(tree:BBPolarTreeVO):void{
				treeLayer.graphics.clear();
				treeLayer.graphics.lineStyle(1,0x111111,1.0);
				drawLeaves(tree);
			}
			
			private function drawLeaves(tree:BBPolarTreeVO):void {
				if (tree.isLeaf() || tree.getKidsNoGrowth()==null || tree.getKidsNoGrowth().length==0) {
					drawBounds(tree);
				} else {
					for (var i:int= 0; i < tree.getKidsNoGrowth().length; i++) {
						drawLeaves(tree.getKidsNoGrowth()[i]);
					}
				}
			}
			
			private function drawBounds(tree:BBPolarTreeVO):void {
				var x1:int, x2:int, x3:int, x4:int, y1:int, y2:int, y3:int, y4:int;
				x1 = int((tree.getRootX() + tree.d1 * Math.cos(tree.getR1(true))));
				y1 = int((tree.getRootY() - tree.d1 * Math.sin(tree.getR1(true))));
				x2 = int((tree.getRootX() + tree.d1 * Math.cos(tree.getR2(true))));
				y2 = int((tree.getRootY() - tree.d1 * Math.sin(tree.getR2(true))));
				x3 = int((tree.getRootX() + tree.d2 * Math.cos(tree.getR1(true))));
				y3 = int((tree.getRootY() - tree.d2 * Math.sin(tree.getR1(true))));
				x4 = int((tree.getRootX() + tree.d2 * Math.cos(tree.getR2(true))));
				y4 = int((tree.getRootY() - tree.d2 * Math.sin(tree.getR2(true))));
				
				var r:Number= tree.getR2(true) - tree.getR1(true);
				if (r < 0)
					r = BBPolarTreeVO.TWO_PI + r;
				Assert.isTrue(r < BBPolarTreeVO.PI);
				
				drawArc(tree.getRootX(),
					tree.getRootY(), tree.d2,
					tree.getR1(true), tree.getR2(true), 1);
				drawArc(tree.getRootX(),
					tree.getRootY(), tree.d1,
					tree.getR1(true), tree.getR2(true), 1);
				treeLayer.graphics.moveTo(x1,y1);
				treeLayer.graphics.lineTo(x3,y3);
				treeLayer.graphics.moveTo(x2,y2);
				treeLayer.graphics.lineTo(x4,y4);
			}
			
			private function drawArc(center_x:Number,center_y:Number,
									radius:Number,angle_from:Number,angle_to:Number,precision:Number):void {
				var angle_diff:Number=angle_to-angle_from;
				var steps:Number=Math.round(angle_diff*precision);
				if(steps==0) steps = 1;
				var angle:Number=angle_from;
				var px:Number=center_x+radius*Math.cos(angle);
				var py:Number=center_y-radius*Math.sin(angle);
				treeLayer.graphics.moveTo(px,py);
				for (var i:int=1; i<=steps; i++) {
					angle=angle_from+angle_diff/steps*i;
					treeLayer.graphics.lineTo(center_x+radius*Math.cos(angle),center_y-radius*Math.sin(angle));
				}
			}
			
			protected function onEnterFrameHandler(event:Event):void
			{
				if(this.visible){
					if(newTu && this.tu!=null){
						prepareForTu();
					}
					if(this.perseveranceSlider.value>this.perseveranceMeter.value)
						dispatchEvent(new Event(UPDATE_PROGRESS));
				}

			}
			
			
			
			public function canvasImage(size:int):BitmapData{
				var ratio:Number = mainCanvas.width/mainCanvas.height;
				var maxActual:Number = ratio>1?mainCanvas.width:mainCanvas.height;
				var scale:Number = size/maxActual;
				var actualMargin:Number = EFFECTIVE_MARGIN/100*maxActual;

				var bmpData:BitmapData = new BitmapData((mainCanvas.width+actualMargin*2)*scale, (mainCanvas.height+actualMargin*2)*scale,true);
				//crop to effective border
				var scaleM:Matrix = new Matrix(scale,0,0,scale,
					-(tu.template.effectiveBorder.x1-actualMargin)*scale,-(tu.template.effectiveBorder.y1-actualMargin)*scale); 
				//						var bmp:Bitmap = new Bitmap(bmpData,"auto",true);
				bmpData.draw(mainCanvas, scaleM,null,null,new Rectangle(0,0,
					(tu.template.effectiveBorder.width+actualMargin)*scale, (tu.template.effectiveBorder.height+actualMargin)*scale));
				return bmpData;
			}
			
			public function get rendering():Boolean{
				return this.visible;
			}
			
			public function get tu():TuVO{
				return _tu;
			}
			
			private var newTu:Boolean = false;
			
			[Bindable] public function set tu(_tu:TuVO):void{
				this._tu = _tu;
				newTu = true;
			}
			
			protected function onCreationCompleteHandler(event:FlexEvent):void
			{
				if(newTu && this.tu!=null){
					prepareForTu();
				}
			}
			
			private function prepareForTu():void{
				while(this.backgroundLayer.numChildren>0) 
					this.backgroundLayer.removeChildAt(0);
				while(this.wordLayer.numChildren>0)
					this.wordLayer.removeChildAt(0);				
//				this.width = _tu.width;
//				this.height = _tu.height;
				_tu.template.generateEffectiveBorder();
				
				//adjust for effective border
				this.mainCanvas.width = _tu.template.effectiveBorder.width+EFFECTIVE_MARGIN;
				this.mainCanvas.height = _tu.template.effectiveBorder.height+EFFECTIVE_MARGIN;
				 this.mainCanvas.left = -_tu.template.effectiveBorder.x1+EFFECTIVE_MARGIN;
				 this.mainCanvas.top = -_tu.template.effectiveBorder.y1+EFFECTIVE_MARGIN;
				if(_tu.backgroundImage!=null)
					this.backgroundLayer.addChild(_tu.backgroundImage);
				for each(var displayWord:DisplayWordVO in _tu.dWords)
					this.slapWord(displayWord);
					
//				patchLayer.patchQueue=this._tu.template.patchIndex.map.getQueue(3);

				newTu = false;
				
			}
			
			
			protected function canvas1_mouseOverHandler(event:MouseEvent):void
			{
				Mouse.show();
			}
			
			protected function canvas1_initializeHandler(event:FlexEvent):void
			{
				//register self as a tu image generator
				FlexGlobals.topLevelApplication["tuImageGenerator"] = this;
			}
			
			protected function btnPostToFacebook_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(POST_TO_FACEBOOK));
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%">
		<s:VGroup horizontalAlign="center" top="0" left="0" right="0">
			<s:HGroup depth="1">
				<s:Label width="170" />
				<s:Button id="btnEditTemplate" click="btnEditTemplate_clickHandler(event)" label="Edit template" fontSize="18" color="#005DF2" />
				<s:Button id="btnSaveAsPng" click="btnSaveAsPng_clickHandler(event)" label = "Save image..." />
				<!--s:Button id="btnSimulateEnterFrame" click="onEnterFrameHandler(event)" label = "EnterFrame" /-->
				<!--s:Button id="btnRecalculate" click="patchLayer.patchQueue = patchLayer.patchQueue;" label="Recalculate" bottom="100" left="100" /-->
				<s:Button id="btnPostToFacebook" label="Post to Facebook" click="btnPostToFacebook_clickHandler(event)" />
				<s:CheckBox label="Auto post when finished" selected="@{autoPostToFacebook}" />
			</s:HGroup>
			<s:HGroup>
				<s:Label text="Squeeze perseverance"  />
				<s:Group>
					<mx:ProgressBar id="perseveranceMeter" label="" mode="manual" width="{perseveranceSlider.value*5}" />
					<mx:HSlider id="perseveranceSlider" minimum="0" maximum="50" value="@{tu.template.perseverance}" width="250" 
							 toolTip="This bar sets the number of words in a row Groffle fails to squeeze in before it stops running."	/>	
				</s:Group>
				<s:Button id="btnMoreWords" label="{(perseveranceMeter.value &gt;= perseveranceSlider.value)?'Squeeze in more words':'Working...'}"
						  enabled="{(perseveranceMeter.value &gt;= perseveranceSlider.value)}" 
						  click="perseveranceSlider.value+=10;" />
				<s:Button id="btnForceFinish" click="btnForceFinish_clickHandler(event)" label = "Force Finish" 
						  visible="{(perseveranceMeter.value &lt; perseveranceSlider.value)}" 
						  includeInLayout="{(perseveranceMeter.value &lt; perseveranceSlider.value)}" 
						   toolTip="Click this button to ask Groffle to stop squeezing in more words."
						  />
				
			</s:HGroup>
			
		</s:VGroup>

		<s:Group depth="2" top="0" left="0" right="0" bottom="0">
			<s:layout>
				<s:BasicLayout />
			</s:layout>
			<mx:Canvas id="mainCanvas" top="0" left="0" bottom="0">
				<mx:UIComponent id="backgroundLayer" top="0" left="0" visible="true"/>
				<mx:UIComponent id="wordLayer" top="0" left="0" />
			</mx:Canvas>
			<mx:Canvas id="treeLayer" top="0" bottom="0" left="0" right="0" visible="false" />
			<!--template:PatchLayer id="patchLayer"  top="0" bottom="0" left="0" right="0" visible="true" /-->
		</s:Group>

	</s:VGroup>

	
</mx:Canvas>