<languageVersion : 1.0;>
kernel NewFilter
<   namespace : "Twist";
    vendor : "Adobe";
    version : 2;
    description : "Twist Transition";
>
{ 

    // First input image parameter is unused in 
    // AnimateTransitionShader effect
    input image4 src0;   
    input image4 from;
    input image4 to;
    
        // Output image
    output pixel4 dst;
    
    parameter float progress<
        minValue: 0.00;
        maxValue: 1.00;
        defaultValue: 0.0;
    >;
    
    parameter float width<
        minValue: 0.0;
        maxValue: 1024.0;
        defaultValue: 500.0;
    >;
    
    parameter float height<
        minValue: 0.00;
        maxValue: 1024.0;
        defaultValue: 500.0;
    >;
    
    void
    evaluatePixel()
    {
        // We need to reference src0 to ensure compiler does not optimize away this field.
        pixel4 src0Pixel = sampleNearest(src0, outCoord());
        
        // Common initialization
        float2 outCoord = outCoord();
        const float imageHeight = 2.0;
        const float scale = 1.0 + imageHeight;
	    float start = progress * scale - imageHeight;
	    float end   = start + imageHeight;
        
        
        float yfrac = outCoord.y / height;
        float angle = (yfrac - start) / (end - start);
		float imageWidth = cos(angle * 3.141592653589); 
        
        if (yfrac < start) {
            dst = sampleLinear(to, outCoord());
        }
        
        else if (yfrac > end) {
            dst = sampleLinear(from, outCoord());
        }
        else {
        if (imageWidth > 0.0) {
        
            float xstep  = (65536.0 / imageWidth);
			float xval   = 0.0;
			float startx = (width - width * imageWidth) / 2.0;
			float xcount = startx;
            
            float sampleWidth = (width * 65536.0) / (xstep);
            
            if (outCoord.x < startx) 
                dst = float4(0.0,0.0,0.0,0.0);
            else if (outCoord.x < (startx + sampleWidth)) {
                float perc = (outCoord.x - startx) / sampleWidth;
                dst = sampleLinear(to, float2(width * perc, outCoord.y)); 
            }
            else
                dst = float4(0.0,0.0,0.0,0.0);  
        }
        
        else if (imageWidth < 0.0) {
            float xstep  = (65536.0 / -imageWidth);
			float xval   = 0.0;
			float startx = (width + width * imageWidth) / 2.0;
			float xcount = startx;
            float sampleWidth = (width * 65536.0) / (xstep);
            
            if (outCoord.x < startx) 
                dst = float4(0.0,0.0,0.0,0.0);
            else if (outCoord.x < (startx + sampleWidth)) {
                float perc = (outCoord.x - startx) / sampleWidth;   
                dst = sampleLinear(from, float2( width * perc, outCoord.y)); 
            }
            else
                dst = float4(0.0,0.0,0.0,0.0); 
        }
        
        }

    }
}   
